I am working on a project to track how long my child is playing the piano using various technologies. I have a Wyze V3 camera that provides an RTSP stream of the piano area. My goal is to use this video stream to detect when my child is sitting at the piano and actively playing, using both audio and pose detection techniques. I want to build a solution that is flexible, maintainable, and adheres to software engineering best practices.

Technologies Being Used:

Wyze V3 camera: Provides RTSP video stream.
Python: For scripting and implementation.
FFmpeg and PyDub: For audio detection (detecting piano sounds from the RTSP stream).
OpenCV (cv2.VideoCapture): For capturing the video stream from the camera.
MediaPipe: For detecting pose landmarks in the video stream.
Home Assistant: Running on a server for logging, visualization, and automation based on detected piano playing.
Requirements:

Pose Detection: The system should detect when my child is in a "playing piano" pose, not just sitting at the piano.
Audio Detection: Detect the sound of the piano being played using FFmpeg and PyDub.
Buffer Time: Include a buffer (e.g., 30 seconds to 1 minute) to account for brief interruptions, such as page turns.
Data Storage: Store playing time data for later analysis and visualization.
Integration with Home Assistant: Make the playing time easily visible in Home Assistant.
Maintainability: The code should be modular, follow Python best practices, and adhere to SOLID programming principles.
Extensibility: The system should be designed to allow for easy modifications and extensions, such as adding new detection methods or stream sources.
Current Challenges:

The system is not storing the detected playtime data anywhere.
There's no integration with Home Assistant yet.
There is no "main" script or driver tying everything together, leading to disjointed components.
Expected Output: Generate a Python-based solution that addresses the above requirements. The solution should include:

A modular design following SOLID principles.
A well-structured "main" script that coordinates the pose detection, audio detection, and timing logic.
Integration points for storing data and updating Home Assistant.
Clear and maintainable code with appropriate error handling and logging.

######################

I need help designing and writing a Python-based system that processes an RTSP stream for both audio and video detection services, adhering to SOLID principles and clean, production-ready code.

Requirements:

The system will have an RTSP stream (URL provided) that needs to be consumed only once.
Audio data is passed to an audio detection service, which detects whether a piano is being played.
Video data is passed to a pose detection service, which detects if someone is sitting at the piano.
Both detection services must run concurrently, independently of each other, and their results should be shared via a queue.
A central monitor consumes detection results from the queue and sends updates to external systems (e.g., Home Assistant or Prometheus).
The system should be modular, extensible, and follow Python best practices, including proper error handling, logging, and testability.
Key Design Decisions:

A Stream Driver class will handle the RTSP stream, extracting both audio and video.
Detection services (audio and pose) will be separate classes that handle only their respective data, following the Single Responsibility Principle.
A shared queue will act as the data pipeline for both detection services and the central monitor.
Use Python threads to run the stream driver and central monitor in parallel.
Adhere to SOLID principles (SRP, OCP, LSP, ISP, DIP) and Python best practices, making the code easily maintainable, testable, and extensible.
Additional Considerations:

Ensure the code has proper logging and error handling to make it production-ready.
The system should be scalable, so consider a design that can accommodate future additions (e.g., adding new detection methods or integrating with other external systems).
Focus on clean, readable code, and provide clear documentation and comments.
Please provide well-structured Python code with appropriate comments that follows these principles